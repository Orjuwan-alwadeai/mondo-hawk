<?xml version="1.0" encoding="ASCII"?>
<dom:TypeDeclaration xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dom="org.amma.dsl.jdt.dom" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
  <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
  <javadoc>
    <tags tagName="@see" nested="false">
      <fragments xsi:type="dom:SimpleName" fullyQualifiedName="BinaryFileOutputStream" identifier="BinaryFileOutputStream" declaration="false"/>
    </tags>
  </javadoc>
  <bodyDeclarations xsi:type="dom:FieldDeclaration">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <fragments extraDimensions="0">
      <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
    </fragments>
    <type xsi:type="dom:SimpleType">
      <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
    </type>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:FieldDeclaration">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <fragments extraDimensions="0">
      <name fullyQualifiedName="_file" identifier="_file" declaration="true"/>
    </fragments>
    <type xsi:type="dom:SimpleType">
      <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
    </type>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:FieldDeclaration">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <fragments extraDimensions="0">
      <name fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="true"/>
    </fragments>
    <type xsi:type="dom:ParameterizedType">
      <type xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
      </type>
      <typeArguments xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
      </typeArguments>
    </type>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <body>
      <statements xsi:type="dom:ExpressionStatement">
        <expression xsi:type="dom:Assignment" operator="=">
          <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
          <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
        </expression>
      </statements>
      <statements xsi:type="dom:ExpressionStatement">
        <expression xsi:type="dom:Assignment" operator="=">
          <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
          <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
        </expression>
      </statements>
      <statements xsi:type="dom:ExpressionStatement">
        <expression xsi:type="dom:Assignment" operator="=">
          <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
          <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
        </expression>
      </statements>
    </body>
    <name fullyQualifiedName="IdeNonSourceOutputStream" identifier="IdeNonSourceOutputStream" declaration="false"/>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="env" identifier="env" declaration="true"/>
      <type xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
      </type>
    </parameters>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="file" identifier="file" declaration="true"/>
      <type xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
      </type>
    </parameters>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
      <type xsi:type="dom:ParameterizedType">
        <type xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
        </type>
        <typeArguments xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
        </typeArguments>
      </type>
    </parameters>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
    <modifiers xsi:type="dom:MarkerAnnotation">
      <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
    </modifiers>
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <body>
      <statements xsi:type="dom:ExpressionStatement">
        <expression xsi:type="dom:SuperMethodInvocation">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="close" identifier="close" declaration="false"/>
        </expression>
      </statements>
      <statements xsi:type="dom:VariableDeclarationStatement">
        <fragments extraDimensions="0">
          <initializer xsi:type="dom:ClassInstanceCreation">
            <arguments xsi:type="dom:MethodInvocation">
              <name fullyQualifiedName="toByteArray" identifier="toByteArray" declaration="false"/>
            </arguments>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayInputStream" identifier="ByteArrayInputStream" declaration="false"/>
            </type>
          </initializer>
          <name fullyQualifiedName="contents" identifier="contents" declaration="true"/>
        </fragments>
        <type xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
        </type>
      </statements>
      <statements xsi:type="dom:TryStatement">
        <body>
          <statements xsi:type="dom:VariableDeclarationStatement">
            <fragments extraDimensions="0">
              <initializer xsi:type="dom:BooleanLiteral" booleanValue="true"/>
              <name fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="true"/>
            </fragments>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </statements>
          <statements xsi:type="dom:IfStatement">
            <elseStatement xsi:type="dom:Block">
              <statements xsi:type="dom:VariableDeclarationStatement">
                <fragments extraDimensions="0">
                  <initializer xsi:type="dom:NullLiteral"/>
                  <name fullyQualifiedName="in" identifier="in" declaration="true"/>
                </fragments>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
                </type>
              </statements>
              <statements xsi:type="dom:VariableDeclarationStatement">
                <fragments extraDimensions="0">
                  <initializer xsi:type="dom:NullLiteral"/>
                  <name fullyQualifiedName="oldData" identifier="oldData" declaration="true"/>
                </fragments>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
                </type>
              </statements>
              <statements xsi:type="dom:TryStatement">
                <catchClauses>
                  <body>
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:Assignment" operator="=">
                        <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                        <rightHandSide xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                      </expression>
                    </statements>
                  </body>
                  <exception extraDimensions="0" varargs="false">
                    <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                    </type>
                  </exception>
                </catchClauses>
                <body>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:Assignment" operator="=">
                      <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                      <rightHandSide xsi:type="dom:ClassInstanceCreation">
                        <arguments xsi:type="dom:MethodInvocation">
                          <name fullyQualifiedName="toByteArray" identifier="toByteArray" declaration="false"/>
                        </arguments>
                        <type xsi:type="dom:SimpleType">
                          <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayInputStream" identifier="ByteArrayInputStream" declaration="false"/>
                        </type>
                      </rightHandSide>
                    </expression>
                  </statements>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:Assignment" operator="=">
                      <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                      <rightHandSide xsi:type="dom:ClassInstanceCreation">
                        <arguments xsi:type="dom:MethodInvocation">
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                          <name fullyQualifiedName="getContents" identifier="getContents" declaration="false"/>
                        </arguments>
                        <type xsi:type="dom:SimpleType">
                          <name xsi:type="dom:SimpleName" fullyQualifiedName="BufferedInputStream" identifier="BufferedInputStream" declaration="false"/>
                        </type>
                      </rightHandSide>
                    </expression>
                  </statements>
                  <statements xsi:type="dom:IfStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="FileSystemUtil" identifier="FileSystemUtil" declaration="false"/>
                      <name fullyQualifiedName="compareStreams" identifier="compareStreams" declaration="false"/>
                    </expression>
                    <thenStatement xsi:type="dom:Block">
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:Assignment" operator="=">
                          <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                          <rightHandSide xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                        </expression>
                      </statements>
                    </thenStatement>
                  </statements>
                </body>
                <finally>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                      <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
                    </expression>
                  </statements>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                      <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
                    </expression>
                  </statements>
                </finally>
              </statements>
              <statements xsi:type="dom:IfStatement">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                <thenStatement xsi:type="dom:Block">
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                      <name fullyQualifiedName="reset" identifier="reset" declaration="false"/>
                    </expression>
                  </statements>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                      <arguments xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                      <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="false"/>
                    </expression>
                  </statements>
                </thenStatement>
              </statements>
            </elseStatement>
            <expression xsi:type="dom:PrefixExpression" operator="!">
              <operand xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <name fullyQualifiedName="exists" identifier="exists" declaration="false"/>
              </operand>
            </expression>
            <thenStatement xsi:type="dom:Block">
              <statements xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                  <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                  <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="false"/>
                </expression>
              </statements>
            </thenStatement>
          </statements>
        </body>
        <finally>
          <statements xsi:type="dom:ExpressionStatement">
            <expression xsi:type="dom:MethodInvocation">
              <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
              <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
            </expression>
          </statements>
        </finally>
      </statements>
      <statements xsi:type="dom:IfStatement">
        <expression xsi:type="dom:InfixExpression" operator="&amp;&amp;">
          <leftOperand xsi:type="dom:InfixExpression" operator="!=">
            <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
            <rightOperand xsi:type="dom:NullLiteral"/>
          </leftOperand>
          <rightOperand xsi:type="dom:PrefixExpression" operator="!">
            <operand xsi:type="dom:MethodInvocation">
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
              <name fullyQualifiedName="isEmpty" identifier="isEmpty" declaration="false"/>
            </operand>
          </rightOperand>
        </expression>
        <thenStatement xsi:type="dom:Block">
          <statements xsi:type="dom:ExpressionStatement">
            <expression xsi:type="dom:MethodInvocation">
              <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
              <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                  <name fullyQualifiedName="getAptProject" identifier="getAptProject" declaration="false"/>
                </expression>
                <name fullyQualifiedName="getGeneratedFileManager" identifier="getGeneratedFileManager" declaration="false"/>
              </expression>
              <name fullyQualifiedName="addGeneratedFileDependency" identifier="addGeneratedFileDependency" declaration="false"/>
            </expression>
          </statements>
          <statements xsi:type="dom:ExpressionStatement">
            <expression xsi:type="dom:MethodInvocation">
              <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
              <name fullyQualifiedName="addNewResource" identifier="addNewResource" declaration="false"/>
            </expression>
          </statements>
        </thenStatement>
      </statements>
    </body>
    <name fullyQualifiedName="close" identifier="close" declaration="true"/>
    <returnType xsi:type="dom:PrimitiveType" code="void"/>
    <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <body>
      <statements xsi:type="dom:IfStatement">
        <expression xsi:type="dom:InfixExpression" operator="!=">
          <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="stream" identifier="stream" declaration="false"/>
          <rightOperand xsi:type="dom:NullLiteral"/>
        </expression>
        <thenStatement xsi:type="dom:Block">
          <statements xsi:type="dom:TryStatement">
            <catchClauses>
              <body/>
              <exception extraDimensions="0" varargs="false">
                <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                </type>
              </exception>
            </catchClauses>
            <body>
              <statements xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="stream" identifier="stream" declaration="false"/>
                  <name fullyQualifiedName="close" identifier="close" declaration="false"/>
                </expression>
              </statements>
            </body>
          </statements>
        </thenStatement>
      </statements>
    </body>
    <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="true"/>
    <returnType xsi:type="dom:PrimitiveType" code="void"/>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="stream" identifier="stream" declaration="true"/>
      <type xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
      </type>
    </parameters>
  </bodyDeclarations>
  <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
    <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
    <body>
      <statements xsi:type="dom:TryStatement">
        <catchClauses>
          <body>
            <statements xsi:type="dom:IfStatement">
              <elseStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                    <arguments xsi:type="dom:InfixExpression" operator="+">
                      <leftOperand xsi:type="dom:StringLiteral" escapedValue="&quot;Could not create generated non-Java file &quot;"/>
                      <rightOperand xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                        <name fullyQualifiedName="getName" identifier="getName" declaration="false"/>
                      </rightOperand>
                    </arguments>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
                    <name fullyQualifiedName="log" identifier="log" declaration="false"/>
                  </expression>
                </statements>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:ClassInstanceCreation">
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                      </type>
                    </initializer>
                    <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                    <name fullyQualifiedName="initCause" identifier="initCause" declaration="false"/>
                  </expression>
                </statements>
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                </statements>
              </elseStatement>
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <name fullyQualifiedName="exists" identifier="exists" declaration="false"/>
              </expression>
              <thenStatement xsi:type="dom:Block"/>
            </statements>
          </body>
          <exception extraDimensions="0" varargs="false">
            <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
            </type>
          </exception>
        </catchClauses>
        <body>
          <statements xsi:type="dom:ExpressionStatement">
            <expression xsi:type="dom:MethodInvocation">
              <arguments xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <name fullyQualifiedName="getParent" identifier="getParent" declaration="false"/>
              </arguments>
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="FileSystemUtil" identifier="FileSystemUtil" declaration="false"/>
              <name fullyQualifiedName="makeDerivedParentFolders" identifier="makeDerivedParentFolders" declaration="false"/>
            </expression>
          </statements>
          <statements xsi:type="dom:IfStatement">
            <elseStatement xsi:type="dom:Block">
              <statements xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="toSave" identifier="toSave" declaration="false"/>
                  <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                  <arguments xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                  <arguments xsi:type="dom:NullLiteral"/>
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                  <name fullyQualifiedName="setContents" identifier="setContents" declaration="false"/>
                </expression>
              </statements>
            </elseStatement>
            <expression xsi:type="dom:SimpleName" fullyQualifiedName="create" identifier="create" declaration="false"/>
            <thenStatement xsi:type="dom:Block">
              <statements xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="toSave" identifier="toSave" declaration="false"/>
                  <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                  <arguments xsi:type="dom:NullLiteral"/>
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                  <name fullyQualifiedName="create" identifier="create" declaration="false"/>
                </expression>
              </statements>
              <statements xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                  <name fullyQualifiedName="setDerived" identifier="setDerived" declaration="false"/>
                </expression>
              </statements>
            </thenStatement>
          </statements>
        </body>
      </statements>
    </body>
    <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="true"/>
    <returnType xsi:type="dom:PrimitiveType" code="void"/>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="toSave" identifier="toSave" declaration="true"/>
      <type xsi:type="dom:SimpleType">
        <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
      </type>
    </parameters>
    <parameters extraDimensions="0" varargs="false">
      <name fullyQualifiedName="create" identifier="create" declaration="true"/>
      <type xsi:type="dom:PrimitiveType" code="boolean"/>
    </parameters>
    <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
  </bodyDeclarations>
  <name fullyQualifiedName="IdeNonSourceOutputStream" identifier="IdeNonSourceOutputStream" declaration="true"/>
  <superclassType xsi:type="dom:SimpleType">
    <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayOutputStream" identifier="ByteArrayOutputStream" declaration="false"/>
  </superclassType>
</dom:TypeDeclaration>
